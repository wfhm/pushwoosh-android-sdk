apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

apply from: '../scripts/buildSdk/build.gradle'
apply from: '../scripts/prepareAar/build.gradle'

android {
    namespace 'com.pushwoosh.demoapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.pushwoosh.demoapp"
        minSdk 24
        targetSdk 34
        versionCode 2
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def useLocalSdk = project.hasProperty('useLocalSdk') && project.getProperty('useLocalSdk').toBoolean()

tasks.register("buildPushwoosh", GradleBuild) {
    buildFile = file('build.gradle')
    buildName = "buildPushwooshTask"
}

tasks.register("copyAarsToOutputDir", GradleBuild) {
    buildFile = file('build.gradle')
    buildName = "copyAarsToOutputDir"
}

android.applicationVariants.configureEach { variant ->
    if (variant.name == "release" && useLocalSdk) {
        def modulesList = [
                "pushwoosh", "pushwoosh-badge", "pushwoosh-location",
                "pushwoosh-firebase", "pushwoosh-inbox", "pushwoosh-inbox-ui",
                "pushwoosh-huawei", "pushwoosh-xiaomi"
        ]

        ArrayList<String> dependenciesList = new ArrayList<>()
        ArrayList<String> aarsTaskList = new ArrayList<>()
        ArrayList<String> bundleReleaseAarList = new ArrayList<>()
        for (String projectName in modulesList) {
            dependenciesList.add(String.format(":%s:assembleRelease", projectName))
            aarsTaskList.add(String.format(":%s:copyToGlobal", projectName))
            bundleReleaseAarList.add(String.format(":%s:bundleReleaseAar", projectName))
            dependencies {
                releaseImplementation fileTree(include: ["*.aar"], dir: "../${projectName}/build/outputs/aar")
            }
        }

        // Use the lazy API to get tasks by name
        tasks.named("buildPushwoosh").configure { buildPushwoosh ->
            buildPushwoosh.setTasks(dependenciesList)
        }

        tasks.named("copyAarsToOutputDir").configure { copyAars ->
            copyAars.setTasks(aarsTaskList)
        }

        // Use lazy API for variant tasks
        variant.preBuildProvider.configure {
            it.dependsOn("buildPushwoosh")
            it.dependsOn(bundleReleaseAarList)
        }
        variant.assembleProvider.configure { it.finalizedBy("copyAarsToOutputDir") }
    }
}

dependencies {
    implementation libs.google.services
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.firebase.messaging

    if (useLocalSdk) {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        debugApi project(':pushwoosh')
        debugApi project(':pushwoosh-firebase')
        debugApi project(':pushwoosh-badge')
        debugApi project(':pushwoosh-location')
        debugApi project(':pushwoosh-amazon')
        debugApi project(':pushwoosh-huawei')
        debugApi project(':pushwoosh-xiaomi')
        debugApi project(':pushwoosh-inbox')
        debugApi project(':pushwoosh-inbox-ui')
    } else
        implementation libs.pushwoosh.firebase

    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}

apply {
    libs.google.services
}

